import React, { useState, useEffect, useRef } from 'react';

// SentinelVision Dashboard - Single-file React component
// - Tailwind CSS utility classes are used for styling (no import required here)
// - This is a UI mock with simulated data and hooks. Replace mock functions
//   with real API calls, WebSocket streams, and model integrations in your project.
// - Default export is the React component so it can be previewed directly.

export default function SentinelVisionDashboard() {
  const [feeds, setFeeds] = useState(mockFeeds());
  const [selectedFeed, setSelectedFeed] = useState(feeds[0].id);
  const [alerts, setAlerts] = useState(mockAlerts());
  const [watchlistMatches, setWatchlistMatches] = useState(mockWatchlist());
  const [activeZone, setActiveZone] = useState(null);
  const [cloudStatus, setCloudStatus] = useState({ connected: true, syncRate: '1.2 Mbps' });
  const [showCloudModal, setShowCloudModal] = useState(false);
  const [voiceActive, setVoiceActive] = useState(false);

  // Simulate live feed updates (replace with WebSocket or RTC in production)
  useEffect(() => {
    const t = setInterval(() => {
      setFeeds((prev) => prev.map(f => ({ ...f, fps: randomInt(12, 30) })));
      // sometimes push fake alerts
      if (Math.random() > 0.94) {
        setAlerts((a) => [{ id: Date.now(), type: 'ARMED_SUSPECT', message: 'Armed suspect detected', zone: `Sector ${randomInt(1,9)}`, confidence: randomInt(78,99) }, ...a].slice(0, 10));
      }
    }, 2500);
    return () => clearInterval(t);
  }, []);

  function handleSnapshot(feedId) {
    alert(`Snapshot taken for feed ${feedId} (simulate save & upload)`);
  }

  function handleExpand(feedId) {
    setSelectedFeed(feedId);
  }

  function toggleVoice() {
    setVoiceActive(v => !v);
    // In production: hook SpeechRecognition API to commands
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-slate-100 p-6">
      {/* Header */}
      <header className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <div className="w-12 h-12 rounded-full bg-gradient-to-tr from-amber-500 to-rose-500 flex items-center justify-center text-slate-900 font-bold">SV</div>
          <div>
            <h1 className="text-2xl font-semibold">SentinelVision</h1>
            <p className="text-sm text-slate-300">AI-Driven Threat Intelligence — NSG Command Center</p>
          </div>
        </div>

        <div className="flex items-center gap-4">
          <div className="text-sm text-slate-300">{new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}</div>

          <button onClick={() => setShowCloudModal(true)} className="px-3 py-2 bg-slate-700/50 rounded-md text-sm flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 15a4 4 0 014-4h1a4 4 0 013.5 2" /></svg>
            NIC Meghraj • {cloudStatus.connected ? 'Connected' : 'Disconnected'}
          </button>

          <div className="flex items-center gap-2">
            <div className="text-sm">Officer • NSG</div>
            <div className="w-10 h-10 rounded-full bg-slate-600 flex items-center justify-center">N</div>
          </div>

          <button onClick={toggleVoice} className={`p-2 rounded-full ${voiceActive ? 'bg-rose-500' : 'bg-slate-700/50'}`} title="Toggle Voice Commands">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 1v11m0 0a3 3 0 01-3 3H7a5 5 0 0010 0h-2a3 3 0 01-3-3z" /></svg>
          </button>
        </div>
      </header>

      {/* Main Grid */}
      <main className="grid grid-cols-12 gap-6">
        {/* Left column: live feeds + watchlist */}
        <section className="col-span-8 space-y-6">
          <div className="grid grid-cols-2 gap-4">
            {/* Feed cards (top-left) */}
            {feeds.slice(0,4).map(feed => (
              <div key={feed.id} className="relative bg-slate-800/60 rounded-lg overflow-hidden border border-slate-700">
                <div className="absolute top-3 left-3 bg-black/40 px-2 py-1 rounded text-xs">{feed.sourceType} • {feed.id}</div>
                <div className="absolute top-3 right-3 flex gap-2">
                  <button onClick={() => handleSnapshot(feed.id)} className="px-2 py-1 bg-slate-700/50 rounded text-xs">Snapshot</button>
                  <button onClick={() => handleExpand(feed.id)} className="px-2 py-1 bg-slate-700/50 rounded text-xs">Expand</button>
                </div>

                {/* simulated video */}
                <div className="w-full h-44 bg-gradient-to-br from-slate-700 to-slate-900 flex items-center justify-center">
                  <div className="text-slate-300 text-sm">Live feed preview — {feed.location}</div>
                </div>

                <div className="p-3 flex items-center justify-between text-xs text-slate-300">
                  <div>Model: YOLOv8 • FPS: {feed.fps}</div>
                  <div className={`px-2 py-1 rounded ${feed.threat === 'CRITICAL' ? 'bg-rose-600 text-white' : feed.threat === 'SUSPICIOUS' ? 'bg-amber-500 text-black' : 'bg-emerald-600 text-white'}`}>{feed.threat}</div>
                </div>
              </div>
            ))}
          </div>

          {/* Expanded feed + timeline */}
          <div className="bg-slate-800/50 rounded-lg p-4 border border-slate-700">
            <div className="flex gap-4">
              <div className="w-3/4 bg-slate-900 rounded-lg p-2">
                <div className="w-full h-64 bg-black/60 rounded flex items-center justify-center"> 
                  <div className="text-slate-300">Expanded Feed • {feeds.find(f => f.id === selectedFeed)?.location}</div>
                </div>

                <div className="mt-3 flex items-center justify-between text-sm text-slate-300">
                  <div>Active models: YOLOv8m • ArcFace • CNN-LSTM</div>
                  <div className="flex items-center gap-3">
                    <button className="px-3 py-1 bg-slate-700/40 rounded">AI Replay</button>
                    <button className="px-3 py-1 bg-slate-700/40 rounded">Flag Event</button>
                    <button className="px-3 py-1 bg-rose-600 text-white rounded">Raise Alert</button>
                  </div>
                </div>
              </div>

              <aside className="w-1/4 bg-slate-800/60 rounded-lg p-3">
                <h3 className="text-sm font-semibold mb-2">Event Timeline</h3>
                <ul className="text-xs text-slate-300 space-y-2 max-h-56 overflow-auto">
                  {alerts.map(a => (
                    <li key={a.id} className="p-2 bg-slate-700/20 rounded flex justify-between items-center">
                      <div>
                        <div className="font-medium">{a.type.replace('_',' ')}</div>
                        <div className="text-[11px] text-slate-400">{a.message} • {a.zone}</div>
                      </div>
                      <div className="text-xs text-slate-200">{a.confidence}%</div>
                    </li>
                  ))}
                </ul>
              </aside>
            </div>
          </div>

          {/* Reports and controls */}
          <div className="flex gap-4">
            <div className="flex-1 bg-slate-800/60 rounded-lg p-4 border border-slate-700">
              <h3 className="text-sm font-semibold mb-2">Daily Threat Index</h3>
              <div className="h-28 flex items-center justify-center text-slate-300">Threat score: <span className="ml-2 font-bold text-2xl">{randomInt(28,92)}</span></div>
              <div className="mt-3 flex gap-2">
                <button className="px-3 py-2 bg-slate-700/40 rounded">Generate PDF</button>
                <button className="px-3 py-2 bg-slate-700/40 rounded">Export JSON</button>
              </div>
            </div>

            <div className="w-80 bg-slate-800/60 rounded-lg p-4 border border-slate-700">
              <h3 className="text-sm font-semibold mb-2">Edge Device Status</h3>
              <div className="text-xs text-slate-300 space-y-2">
                <div className="flex justify-between"><span>Jetson-Edge-01</span><span>GPU 64% • CPU 32%</span></div>
                <div className="flex justify-between"><span>Jetson-Edge-02</span><span>GPU 21% • CPU 42%</span></div>
                <div className="flex justify-between"><span>Jetson-Edge-03</span><span>Offline</span></div>
              </div>
            </div>
          </div>
        </section>

        {/* Right column: map + facial rec + analytics */}
        <aside className="col-span-4 space-y-6">
          {/* Map */}
          <div className="bg-slate-800/50 rounded-lg p-3 border border-slate-700">
            <h3 className="text-sm font-semibold mb-2">Threat Intelligence Map</h3>
            <div className="w-full h-60 bg-[url('https://images.unsplash.com/photo-1502784444185-1d8f8a4c66f8?q=80&w=1400&auto=format&fit=crop&ixlib=rb-4.0.3&s=ea0b8ef2d2e8b0b4e3b6b4a4e9b6d7b0')] bg-cover rounded-lg flex items-end p-3">
              <div className="bg-black/40 px-3 py-2 rounded text-xs">Interactive GIS — Click markers to inspect</div>
            </div>
            <div className="mt-2 text-xs text-slate-300">Active alerts: {alerts.length}</div>
          </div>

          {/* Facial recognition */}
          <div className="bg-slate-800/50 rounded-lg p-3 border border-slate-700">
            <h3 className="text-sm font-semibold mb-2">Facial Recognition • Watchlist</h3>
            <div className="space-y-2 max-h-60 overflow-auto">
              {watchlistMatches.map(w => (
                <div key={w.id} className="flex items-center gap-3 p-2 bg-slate-700/20 rounded">
                  <div className="w-12 h-12 bg-slate-600 rounded flex items-center justify-center">{w.name[0]}</div>
                  <div className="flex-1 text-xs">
                    <div className="font-medium">{w.name}</div>
                    <div className="text-slate-400">Confidence: {w.confidence}% • Last seen: {w.location}</div>
                  </div>
                  <div className="text-xs">{w.time}</div>
                </div>
              ))}
            </div>
            <div className="mt-3 flex gap-2">
              <button className="px-3 py-1 bg-rose-600 text-white rounded text-sm">High Priority Matches</button>
              <button className="px-3 py-1 bg-slate-700/30 rounded text-sm">Export Watchlist</button>
            </div>
          </div>

          {/* Behavior analytics */}
          <div className="bg-slate-800/50 rounded-lg p-3 border border-slate-700">
            <h3 className="text-sm font-semibold mb-2">Behavior Analytics</h3>
            <div className="text-xs text-slate-300">Heatmap (last 24 hrs)</div>
            <div className="mt-2 w-full h-24 bg-gradient-to-tr from-rose-600/10 via-amber-400/10 to-emerald-600/10 rounded flex items-center justify-center text-slate-300">Activity heatmap preview</div>
            <div className="mt-3 text-xs text-slate-400">Anomalies detected: {alerts.filter(a=>a.type!=='INFO').length}</div>
          </div>
        </aside>
      </main>

      {/* Cloud modal */}
      {showCloudModal && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center">
          <div className="w-96 bg-slate-900 rounded-lg p-4 border border-slate-700">
            <div className="flex justify-between items-center mb-3">
              <h3 className="text-lg">NIC Meghraj • Cloud Status</h3>
              <button onClick={() => setShowCloudModal(false)} className="text-slate-400">✕</button>
            </div>
            <div className="text-sm text-slate-300 mb-2">Connection: {cloudStatus.connected ? 'Connected' : 'Disconnected'}</div>
            <div className="text-sm text-slate-300 mb-2">Sync Rate: {cloudStatus.syncRate}</div>
            <div className="text-sm text-slate-300 mb-3">Edge Devices: 12 connected • 2 offline</div>
            <div className="flex gap-2">
              <button className="px-3 py-2 bg-slate-700/40 rounded">Retrain Model</button>
              <button className="px-3 py-2 bg-rose-600 text-white rounded">Force Sync</button>
            </div>
          </div>
        </div>
      )}

      {/* Footer */}
      <footer className="mt-6 text-xs text-slate-400">SentinelVision — Hybrid edge-cloud AI platform • Designed for NSG • Mock UI (replace with live integrations)</footer>
    </div>
  );
}

/* -------------------------- helpers & mock data -------------------------- */

function mockFeeds() {
  return [
    { id: 'CAM-01', sourceType: 'CCTV', location: 'Perimeter Sector 1', fps: 24, threat: 'SAFE' },
    { id: 'DR-02', sourceType: 'DRONE', location: 'Sector 4 - Aerial', fps: 18, threat: 'SUSPICIOUS' },
    { id: 'BC-03', sourceType: 'BODY-CAM', location: 'Entry Gate 2', fps: 30, threat: 'SAFE' },
    { id: 'ROB-04', sourceType: 'ROBOT', location: 'Patrol Route 3', fps: 16, threat: 'CRITICAL' },
    { id: 'CAM-05', sourceType: 'CCTV', location: 'Storage Yard', fps: 20, threat: 'SAFE' },
  ];
}

function mockAlerts() {
  return [
    { id: 1, type: 'ARMED_SUSPECT', message: 'Weapon-like object detected', zone: 'Sector 3', confidence: 92 },
    { id: 2, type: 'LOITERING', message: 'Extended loitering near gate', zone: 'Gate 2', confidence: 78 },
    { id: 3, type: 'CROWD_SURGE', message: 'Sudden crowd formation', zone: 'Sector 6', confidence: 81 },
  ];
}

function mockWatchlist() {
  return [
    { id: 'w1', name: 'Unknown Male', confidence: 91, location: 'Gate 2', time: '20:41' },
    { id: 'w2', name: 'Possible Person of Interest', confidence: 87, location: 'Sector 3', time: '20:29' },
  ];
}

function randomInt(a,b) { return Math.floor(Math.random()*(b-a+1))+a }
